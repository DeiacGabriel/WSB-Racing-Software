@using Microsoft.AspNetCore.Components.Routing
@using System.Linq
@using Microsoft.EntityFrameworkCore
@using WSB_Management.Data
@using WSB_Management.Models
@using WSB_Management.Services
@inject NavigationManager Nav
@inject WSBRacingDbContext DbContext
@inject EventService EventService
@inherits LayoutComponentBase
@implements IDisposable

<div class="navbar-custom">
    <NavLink href="/customer" class="nav-item" ActiveClass="active" Match="NavLinkMatch.Prefix">
        <span class="material-symbols-outlined">group</span> Kunden
    </NavLink>
    <Dropdown Class="nav-item dropdown">
        <DropdownToggleButton Class="@($"dropdown-toggle {(IsEventsActive ? "active" : "")}")">
            <span class="material-symbols-outlined">assignment</span>
            <span @onclick="LoadEvents">Rennen</span>
        </DropdownToggleButton>

        <DropdownMenu>
            @foreach (var eventItem in EventOptions)
            {
                <DropdownItem To="@($"/events/{eventItem.Name}")"
                              Type="DropdownItemType.Link"
                              Class="nav-item"
                              Active="@IsPathActive($"/events/{eventItem.Name}")">
                    @eventItem.Name
                </DropdownItem>
            }
        </DropdownMenu>
    </Dropdown>
    <NavLink href="/calendar" class="nav-item" ActiveClass="active" Match="NavLinkMatch.Prefix">
        <span class="material-symbols-outlined">
            calendar_month
        </span> Kalender
    </NavLink>
    @* <NavLink href="/events" class="nav-item" ActiveClass="active" Match="NavLinkMatch.Prefix">
        <span class="material-symbols-outlined">tv</span> Events
    </NavLink> *@
    <NavLink href="/rankings" class="nav-item" ActiveClass="active" Match="NavLinkMatch.Prefix">
        <span class="material-symbols-outlined">hourglass_empty</span> Rankings
    </NavLink>
    <NavLink href="/statistics" class="nav-item" ActiveClass="active" Match="NavLinkMatch.Prefix">
        <span class="material-symbols-outlined">bar_chart</span> Statistiken
    </NavLink>

    <!-- Dropdown Stammdaten -->
    <Dropdown Class="nav-item dropdown">
        <DropdownToggleButton Class="@($"dropdown-toggle {(IsMgmtActive ? "active" : "")}")">
            <span class="material-symbols-outlined">list</span>
            <span>Stammdaten</span>
        </DropdownToggleButton>

        <DropdownMenu>
            @foreach (var o in MgmtOptions)
            {
                <DropdownItem
                    To="@o.Path"
                    Type="DropdownItemType.Link"
                    Class="nav-item"
                    Active="@IsPathActive(o.Path)">
                    @o.Label
                </DropdownItem>
            }
        </DropdownMenu>
    </Dropdown>

    <NavLink href="/settings" class="nav-item" ActiveClass="active" Match="NavLinkMatch.Prefix">
        <span class="material-symbols-outlined">settings</span> Einstellungen
    </NavLink>
</div>

@code {
    // NavMenu(WSBRacingDbContext context)
    // {
    //     _context = context;
    // }
    private record MgmtItem(string Label, string Path);

    private readonly MgmtItem[] MgmtOptions = new[] {
        new MgmtItem("Events",      "/management/events"),
        new MgmtItem("Gruppen",      "/management/groups"),
        new MgmtItem("Transponder", "/management/transponder"),
        new MgmtItem("Länder",      "/management/countries"),
        new MgmtItem("Marken",      "/management/brands"),
    };

    private List<Event> EventOptions = new();

    private bool IsMgmtActive => new Uri(Nav.Uri).AbsolutePath
        .StartsWith("/management", StringComparison.OrdinalIgnoreCase);

    private bool IsEventsActive => new Uri(Nav.Uri).AbsolutePath
        .StartsWith("/events", StringComparison.OrdinalIgnoreCase);

    private bool IsPathActive(string path) =>
        new Uri(Nav.Uri).AbsolutePath.StartsWith(path, StringComparison.OrdinalIgnoreCase);

    protected override async Task OnInitializedAsync()
    {
        Nav.LocationChanged += HandleLocationChanged;
        EventService.EventsChanged += OnEventsChanged;
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            EventOptions = await DbContext.Events
                .AsNoTracking()
                .OrderBy(e => e.Validfrom)
                .ToListAsync();
        }
        catch (Exception)
        {
            EventOptions = new List<Event>();
        }
    }

    private async void OnEventsChanged()
    {
        await LoadEvents();
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        Nav.LocationChanged += HandleLocationChanged;
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Nav.LocationChanged -= HandleLocationChanged;
        EventService.EventsChanged -= OnEventsChanged;
    }
}
